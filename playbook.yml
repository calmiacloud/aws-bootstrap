---
- name: AWS Bootstrap
  hosts: localhost
  gather_facts: no
  vars:
    vpc_name:         "{{ project_name }}-{{ project_environment }}-vpc-main-bootstrap"
    sg_test_name:     "{{ project_name }}-{{ project_environment }}-sg-test-bootstrap"
    sg_natgw_name:    "{{ project_name }}-{{ project_environment }}-sg-natgw-bootstrap"
    instance_natgw_name: "{{ project_name }}-{{ project_environment }}-ec2-natgw-bootstrap"
    public_rt_name:   "{{ project_name }}-{{ project_environment }}-rt-public-bootstrap"
    private_rt_name:  "{{ project_name }}-{{ project_environment }}-rt-private-bootstrap"
    nat_rt_name:      "{{ project_name }}-{{ project_environment }}-rt-nat-bootstrap"
    role_name:        "{{ project_name }}-{{ project_environment }}-role-oidc-bootstrap"
    policy_name:      "{{ project_name }}-{{ project_environment }}-policy-oidc-bootstrap"
    s3_name:          "{{ project_name }}-{{ project_environment }}-s3-main-bootstrap"
    keypair_name:     "{{ project_name }}-{{ project_environment }}-keypair-main-bootstrap"
    keypair_file:     "{{ lookup('env', 'HOME') }}/{{ project_name }}-{{ project_environment }}-keypair-main-bootstrap.pem"
  tasks:
    - name: Get AWS account
      amazon.aws.aws_caller_info:
      register: caller_account
    - name: Role
      block:
      - name: Check OIDC provider
        shell: |
          aws iam list-open-id-connect-providers --query "OpenIDConnectProviderList[?contains(Arn, 'token.actions.githubusercontent.com')].Arn | [0]" --output text
        register: check_oidc_provider
      - name: Set fact OIDC provider
        set_fact:
          fact_oidc_provider: "{{ check_oidc_provider.stdout if check_oidc_provider.stdout != 'None' else '' }}"
      - name: Create OIDC provider
        shell: |
          aws iam create-open-id-connect-provider \
            --url https://token.actions.githubusercontent.com \
            --client-id-list sts.amazonaws.com \
            --thumbprint-list 6938fd4d98bab03faadb97b34396831e3780aea1 \
            --query 'OpenIDConnectProviderArn' --output text
        when: fact_oidc_provider == ""
      - name: OIDC IAM Role Policy
        set_fact:
          trustpolicy_role_oidc: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::{{ caller_account.account }}:oidc-provider/token.actions.githubusercontent.com"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringLike": {
                      "token.actions.githubusercontent.com:sub": "repo:{{ github_account }}/{{ github_repo }}:*"
                    }
                  }
                }
              ]
            }
      - name: OIDC IAM Role
        amazon.aws.iam_role:
          name: "{{ role_name }}"
          assume_role_policy_document: "{{ trustpolicy_role_oidc }}"
          inline_policies: "{{ policy_role_oidc }}"
          state: present
      - name: OIDC IAM Role Policy
        community.aws.iam_role_policy:
          role_name: "{{ role_name }}"
          policy_name: "{{ policy_name }}"
          policy_document: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": [
                    "arn:aws:s3:::{{ project_name }}-s3-{{ project_environment }}-*",
                    "arn:aws:s3:::{{ project_name }}-s3-{{ project_environment }}-*/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": [
                    "arn:aws:dynamodb:{{ account_region }}:*:table/{{ project_name }}-ddb-{{ project_environment }}-*"
                  ]
                }
              ]
            }
          state: present